channel<-odbcConnect("Sample Hortonworks Hive DSN", uid = "hue")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive") #, uid = "hue")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hdfs")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hdfs")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hdfs")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hue")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
test<-data.frame((c("A","B","C")))
names(test)<-"test"
test
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hue")  #, pwd = "locknload"
sqlSave(channel = channel, dat = test,tablename="test1", rownames=F, append = T,colnames = FALSE)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
library(RODBC)
startzeit<-Sys.time()
#channel<-odbcConnect("hortonworks_hive" , uid = "hue")  #, pwd = "locknload"
channel<-odbcConnect("hortonworks_hive" , uid = "hdfs")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
test<-data.frame((c("A","B","C")))
names(test)<-"test"
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hue")  #, pwd = "locknload"
sqlSave(channel = channel, dat = test,tablename="test1", rownames=F, append = T,colnames = FALSE)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
test<-data.frame((c("A","B","C")))
names(test)<-"test"
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hue")  #, pwd = "locknload"
#sqlSave(channel = channel, dat = test,tablename="test1", rownames=F, append = T,colnames = FALSE)
sqlSave(channel = channel, dat = test,tablename="test1", rownames=F, append = F,colnames = FALSE)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
test<-data.frame((c("A","B","C")))
names(test)<-"test"
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hue")  #, pwd = "locknload"
#sqlSave(channel = channel, dat = test,tablename="test1", rownames=F, append = T,colnames = FALSE)
sqlSave(channel = channel, dat = test,tablename="test2", rownames=F, append = F,colnames = FALSE)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
#R version 3.1.0 (2014-04-10) -- "Spring Dance" (64bit)
library(RJDBC)
library(DBI)
library(rJava)
.jinit()
for(l in list.files('c:/work/lib/hive/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
.jaddClassPath("C:/Work/lib/hive-service-0.11.0.jar")
.jclassPath()
options( java.parameters = "-Xmx8g" )
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "c:/work/lib/hive/lib/hive-jdbc-0.13.0.2.1.1.0-385.jar" )
#conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "sample", "1111")
sample_08 <- dbReadTable(conn, "sample_08")
dbDisconnect(conn)
options( java.parameters = "-Xmx8g" )
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "c:/work/lib/hive/lib/hive-jdbc-0.13.0.2.1.1.0-385.jar" )
#conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
sample_08 <- dbReadTable(conn, "sample_08")
dbDisconnect(conn)
sample_08
test<-data.frame((c("A","B","C")))
names(test)<-"test"
#R version 3.1.0 (2014-04-10) -- "Spring Dance" (64bit)
library(RJDBC)
library(DBI)
library(rJava)
.jinit()
for(l in list.files('c:/work/lib/hive/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
.jaddClassPath("C:/Work/lib/hive-service-0.11.0.jar")
.jclassPath()
options( java.parameters = "-Xmx8g" )
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "c:/work/lib/hive/lib/hive-jdbc-0.13.0.2.1.1.0-385.jar" )
conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
dbWriteTable(conn=conn, name="test3", value=test)
dbWriteTable(conn=conn, name="test3", value=test, append=F)
dbDisconnect(conn)
conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
dbWriteTable(conn=conn, "test3",test, row.names=F)
test<-data.frame((c("A","B","C")))
names(test)<-"test"
#R version 3.1.0 (2014-04-10) -- "Spring Dance" (64bit)
library(RJDBC)
library(DBI)
library(rJava)
.jinit()
for(l in list.files('c:/work/lib/hive/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
.jaddClassPath("C:/Work/lib/hive-service-0.11.0.jar")
.jclassPath()
options( java.parameters = "-Xmx8g" )
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "c:/work/lib/hive/lib/hive-jdbc-0.13.0.2.1.1.0-385.jar" )
#conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
sample_08 <- dbReadTable(conn, "sample_08")
#dbWriteTable(conn=conn, name="test3", value=test, append=F)
dbWriteTable(conn=conn, "test4",test, row.names=F)
dbDisconnect(conn)
2**4
3**2
library(devtools)
devtools::install_github('christophergandrud/d3Network')
library(d3Network)
Source <- c("A", "A", "A", "A", "B", "B", "C", "C", "D")
Target <- c("B", "C", "D", "J", "E", "F", "G", "H", "I")
NetworkData <- data.frame(Source, Target)
d3SimpleNetwork(NetworkData, width = 400, height = 250,
textColour = "orange", linkColour = "red",
nodeColor = "orange", opacity = 0.9)
library(d3Network)
d3SimpleNetwork(NetworkData, width = 400, height = 250,
textColour = "orange", linkColour = "red",
nodeColor = "orange", opacity = 0.9)
d3SimpleNetwork(NetworkData, width = 400, height = 250)
d3SimpleNetwork(NetworkData, width = 400, height = 250)
install.packages("d3Network")
remove.packages("d3Network")
library(devtools)
library(d3Network)
install.packages("d3Network")
install.packages("d3Network")
update.packages()
update.packages()
library(d3Network)
install.packages("d3Network")
update.packages()
library(Shiny)
library(shiny)
shinyUI
shinyApp
shiny::
shiny::runGitHub("shiny-js-examples", "jcheng5", subdir="output")
runGitHub
setwd("C:/Users/e.harschack/Documents/ITzza2")
getwd()
runApp("shiny-kreise")
library(shiny)
runApp("shiny-kreise")
runApp("shiny-kreise")
setwd("C:/Users/e.harschack/Documents/ITzza2")
getwd()
runApp("shiny-kreise")
library(shiny)
setwd("C:/Users/e.harschack/Documents/ITzza2")
getwd()
runApp("shiny-kreise")
install.packages("rgeos")
library(shiny)
setwd("C:/Users/e.harschack/Documents/ITzza2")
getwd()
runApp("shiny-kreise")
setwd("C:/Users/e.harschack/Documents/ITzza2")
getwd()
library(shiny)
setwd("C:/Users/e.harschack/Documents/ITzza2")
getwd()
runApp("shiny-kreise")
runApp("shiny-kreise", port=123)
update.packages(ask=F)
library(shiny)
setwd("C:/Users/e.harschack/Documents/ITzza2")
getwd()
runApp("shiny-kreise", port=123)
# install.packages("shinydashboard")
#
# library(shiny)
# library(shinydashboard)
#
# ui <- dashboardPage(
#   dashboardHeader(),
#   dashboardSidebar(),
#   dashboardBody()
# )
#
# server <- function(input, output) { }
#
# shinyApp(ui, server)
############################
checkboxInput(inputId="checkb", label="Checkbox", value = FALSE))
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(title = "Controls", sliderInput("slider", "Number of observations:", 1, 100, 50)),
box(checkboxInput(inputId="checkb", label="Rot f?rben?", value = FALSE))
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
if (input$checkb==F)
{
hist(data)
}else{hist(data, col="red")}
})
}
shinyApp(ui, server)
install.packages("shinydashboard")
# install.packages("shinydashboard")
#
# library(shiny)
# library(shinydashboard)
#
# ui <- dashboardPage(
#   dashboardHeader(),
#   dashboardSidebar(),
#   dashboardBody()
# )
#
# server <- function(input, output) { }
#
# shinyApp(ui, server)
############################
checkboxInput(inputId="checkb", label="Checkbox", value = FALSE))
## app.R ##
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(title = "Controls", sliderInput("slider", "Number of observations:", 1, 100, 50)),
box(checkboxInput(inputId="checkb", label="Rot f?rben?", value = FALSE))
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
if (input$checkb==F)
{
hist(data)
}else{hist(data, col="red")}
})
}
shinyApp(ui, server)
# install.packages("shinydashboard")
#
# library(shinydashboard)
#
# ui <- dashboardPage(
#   dashboardHeader(),
#   dashboardSidebar(),
#   dashboardBody()
# )
#
# server <- function(input, output) { }
#
# shinyApp(ui, server)
############################
checkboxInput(inputId="checkb", label="Checkbox", value = FALSE))
## app.R ##
library(shinydashboard)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(plotOutput("plot1", height = 250)),
box(title = "Controls", sliderInput("slider", "Number of observations:", 1, 100, 50)),
box(checkboxInput(inputId="checkb", label="Rot f?rben?", value = FALSE))
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
if (input$checkb==F)
{
hist(data)
}else{hist(data, col="red")}
})
}
shinyApp(ui, server)
library(d3heatmap)
data(mtcars)
cols<-colorRampPalette(c("red","white", "blue"))(20)
d3heatmap(mtcars, scale = "column", col=cols)
d3heatmap(mtcars, scale = "row", col=cols)
install.packages("d3heatmap")
library(d3heatmap)
data(mtcars)
cols<-colorRampPalette(c("red","white", "blue"))(20)
d3heatmap(mtcars, scale = "column", col=cols)
d3heatmap(mtcars, scale = "row", col=cols)
cols<-colorRampPalette(c("red","white", "blue"))(20)
d3heatmap(mtcars, scale = "column", col=cols)
d3heatmap(mtcars, scale = "row", col=cols)
library(d3heatmap)
data(mtcars)
cols<-colorRampPalette(c("red","white", "blue"))(20)
d3heatmap(mtcars, scale = "column", col=cols)
library(networkD3)
# Create fake data
abt1<-c("Eugene","Frank","Maik","Alex")
abt2<-c("Nathali","Waldemar", "Dirk", "Valerij")
vor1<-rep("Ute", length(abt1))
vor2<-rep("Udo", length(abt2))
vor<-c(vor1, vor2 )
abt<-c(abt1, abt2 )
vor<-c(vor1, vor2, "Markus","Markus" )
abt<-c(abt1, abt2, "Ute", "Udo")
networkData <- data.frame(vor, abt)
simpleNetwork(networkData, fontSize=20)
setwd("C:/Users/e.harschack/Documents/ITzza2/net")
###################################################################
library(magrittr)
simpleNetwork(networkData) %>%
saveNetwork(file = 'Net1.html')
simpleNetwork(networkData, fontSize=20)
library(d3heatmap)
data(mtcars)
cols<-colorRampPalette(c("red","white", "blue"))(20)
d3heatmap(mtcars, scale = "column", col=cols)
d3heatmap(mtcars, scale = "row", col=cols)
library(d3heatmap)
data(mtcars)
cols<-colorRampPalette(c("red","white", "blue"))(20)
d3heatmap(mtcars, scale = "column", col=cols)
d3heatmap(mtcars, scale = "row", col=cols)
install.packages(c("foreign", "ggmap", "manipulate", "nlme", "R6"))
library(d3heatmap)
data(mtcars)
cols<-colorRampPalette(c("red","white", "blue"))(20)
d3heatmap(mtcars, scale = "column", col=cols)
d3heatmap(mtcars, scale = "row", col=cols)
install.packages("tools")
install.packages("tools")
install.packages("tools")
install.packages("tools")
library(d3heatmap)
data(mtcars)
cols<-colorRampPalette(c("red","white", "blue"))(20)
d3heatmap(mtcars, scale = "column", col=cols)
d3heatmap(mtcars, scale = "row", col=cols)
library(shinydashboard)
library(shiny)
library(d3heatmap)
data(mtcars)
cols<-colorRampPalette(c("red","white", "blue"))(20)
d3heatmap(mtcars, scale = "column", col=cols)
library(networkD3)
# Create fake data
abt1<-c("Eugene","Frank","Maik","Alex")
abt2<-c("Nathali","Waldemar", "Dirk", "Valerij")
vor1<-rep("Ute", length(abt1))
vor2<-rep("Udo", length(abt2))
vor<-c(vor1, vor2 )
abt<-c(abt1, abt2 )
vor<-c(vor1, vor2, "Markus","Markus" )
abt<-c(abt1, abt2, "Ute", "Udo")
networkData <- data.frame(vor, abt)
simpleNetwork(networkData, fontSize=20)
#################################
library(RCurl)
URL <- "https://raw.githubusercontent.com/christophergandrud/networkD3/master/JSONdata/energy.json"
Energy <- getURL(URL, ssl.verifypeer = FALSE)
# Convert to data frame
EngLinks <- JSONtoDF(jsonStr = Energy,
array = "links")
EngNodes <- JSONtoDF(jsonStr = Energy,
array = "nodes")
sankeyNetwork(Links = EngLinks, Nodes = EngNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
width = 700, fontSize = 12, nodeWidth = 30)
################################
vor_num<-c(0,0,rep(1,4), rep(2,4))
abt_num<-as.numeric(c(1:10))
fr<-as.data.frame(vor_num)
fr$abt_num<-abt_num
fr$val<-100
fr$val[1:2]<-400
abt1<-c("Eugene","Frank","Maik","Alexandr")
abt2<-c("Nathali","Waldemar", "Dirk", "Valerij")
no<-as.data.frame(c("Markus", "Ute", "Udo", abt1, abt2), stringsAsFactors=T)
names(no)<-"namen"
sankeyNetwork(Links = fr, Nodes = no,
Source = "vor_num", Target = "abt_num",
Value = "val", NodeID = "namen",
width = 700, fontSize = 20, nodeWidth = 50)
simpleNetwork(networkData, fontSize=20)
networkData
simpleNetwork(networkData, fontSize=20)
setwd("C:/Users/e.harschack/Documents/ITzza2/net")
getwd()
library(magrittr)
simpleNetwork(networkData) %>%
saveNetwork(file = 'Net1.html')
# Load data
data(MisLinks)
data(MisNodes)
# Plot
forceNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
# Plot
forceNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8)
%>%
saveNetwork(file = 'Net2.html')
forceNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
Group = "group", opacity = 0.8) %>%  saveNetwork(file = 'Net2.html')
library(d3heatmap)
data(mtcars)
cols<-colorRampPalette(c("red","white", "blue"))(20)
d3heatmap(mtcars, scale = "column", col=cols)
d3heatmap(mtcars, scale = "row", col=cols)
install.packages("knittr")
install.packages("knitr")
library(d3heatmap)
data(mtcars)
cols<-colorRampPalette(c("red","white", "blue"))(20)
d3heatmap(mtcars, scale = "column", col=cols)
d3heatmap(mtcars, scale = "row", col=cols)
