library(rJava)
.jinit()
for(l in list.files('c:/work/lib/hive/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
.jaddClassPath("C:/Work/lib/hive-service-0.11.0.jar")
.jclassPath()
options( java.parameters = "-Xmx8g" )
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "c:/work/lib/hive/lib/hive-jdbc-0.13.0.2.1.1.0-385.jar" )
conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
sample_08 <- dbReadTable(conn, "sample_08")
dbDisconnect(conn)
#R version 3.1.0 (2014-04-10) -- "Spring Dance" (64bit)
library(RJDBC)
library(DBI)
library(rJava)
.jinit()
for(l in list.files('c:/work/lib/hive/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
.jaddClassPath("C:/Work/lib/hive-service-0.11.0.jar")
.jclassPath()
options( java.parameters = "-Xmx8g" )
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "c:/work/lib/hive/lib/hive-jdbc-0.13.0.2.1.1.0-385.jar" )
#conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "sample", "1111")
sample_08 <- dbReadTable(conn, "sample_08")
dbDisconnect(conn)
#R version 3.1.0 (2014-04-10) -- "Spring Dance" (64bit)
library(RJDBC)
library(DBI)
library(rJava)
.jinit()
for(l in list.files('c:/work/lib/hive/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
.jaddClassPath("C:/Work/lib/hive-service-0.11.0.jar")
.jclassPath()
options( java.parameters = "-Xmx8g" )
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "c:/work/lib/hive/lib/hive-jdbc-0.13.0.2.1.1.0-385.jar" )
#conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "wample", "1111")
sample_08 <- dbReadTable(conn, "sample_08")
dbDisconnect(conn)
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("hadoop", uid = "hue")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
startzeit<-Sys.time()
channel<-odbcConnect("cloudera", uid = "cloudera")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery,stringsAsFactors=F)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("cloudera", uid = "cloudera")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery,stringsAsFactors=F)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
result
startzeit<-Sys.time()
channel<-odbcConnect("cloudera", uid = "cloudera")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery,stringsAsFactors=F)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
result
startzeit<-Sys.time()
channel<-odbcConnect("cloudera", uid = "cloudera")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from default.sample_08"
result<-sqlQuery(channel, myQuery,stringsAsFactors=F)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
result
startzeit<-Sys.time()
channel<-odbcConnect("cloudera_impala", uid = "cloudera_impala")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery,stringsAsFactors=F)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
result
str(result)
hist(result$salary)
summary(result$salary)
test<-data.frame((c("A","B","C")))
names(test)<-"test"
startzeit<-Sys.time()
channel<-odbcConnect("cloudera_impala", uid = "cloudera_impala")  #, pwd = "locknload"
#sqlSave(channel, dat=test, tablename="default.testa", rownames=FALSE, colnames = FALSE)
#sqlSave(channel, dat=test, tablename="testa", rownames=FALSE, append=T)
sqlSave(channel = channel, dat = test, rownames=F, append = T,colnames = FALSE)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("Sample Hortonworks Hive DSN", uid = "hue")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("Sample Hortonworks Hive DSN", uid = "hue")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("Sample Hortonworks Hive DSN", uid = "hue")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("Sample Hortonworks Hive DSN", uid = "hue")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
result
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("Sample Hortonworks Hive DSN", uid = "hue")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive") #, uid = "hue")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hdfs")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hdfs")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hdfs")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
library(RODBC)
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hue")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
test<-data.frame((c("A","B","C")))
names(test)<-"test"
test
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hue")  #, pwd = "locknload"
sqlSave(channel = channel, dat = test,tablename="test1", rownames=F, append = T,colnames = FALSE)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
library(RODBC)
startzeit<-Sys.time()
#channel<-odbcConnect("hortonworks_hive" , uid = "hue")  #, pwd = "locknload"
channel<-odbcConnect("hortonworks_hive" , uid = "hdfs")  #, pwd = "locknload"
#sqlSave(channel, dat=airportFrame, tablename="AIRPORTS", rownames=FALSE, fast=TRUE)
myQuery<-"select * from sample_08"
result<-sqlQuery(channel, myQuery)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
str(result)
result
test<-data.frame((c("A","B","C")))
names(test)<-"test"
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hue")  #, pwd = "locknload"
sqlSave(channel = channel, dat = test,tablename="test1", rownames=F, append = T,colnames = FALSE)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
test<-data.frame((c("A","B","C")))
names(test)<-"test"
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hue")  #, pwd = "locknload"
#sqlSave(channel = channel, dat = test,tablename="test1", rownames=F, append = T,colnames = FALSE)
sqlSave(channel = channel, dat = test,tablename="test1", rownames=F, append = F,colnames = FALSE)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
test<-data.frame((c("A","B","C")))
names(test)<-"test"
startzeit<-Sys.time()
channel<-odbcConnect("hortonworks_hive" , uid = "hue")  #, pwd = "locknload"
#sqlSave(channel = channel, dat = test,tablename="test1", rownames=F, append = T,colnames = FALSE)
sqlSave(channel = channel, dat = test,tablename="test2", rownames=F, append = F,colnames = FALSE)
odbcClose(channel)
laufzeit<-Sys.time()-startzeit
print(laufzeit)
#R version 3.1.0 (2014-04-10) -- "Spring Dance" (64bit)
library(RJDBC)
library(DBI)
library(rJava)
.jinit()
for(l in list.files('c:/work/lib/hive/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
.jaddClassPath("C:/Work/lib/hive-service-0.11.0.jar")
.jclassPath()
options( java.parameters = "-Xmx8g" )
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "c:/work/lib/hive/lib/hive-jdbc-0.13.0.2.1.1.0-385.jar" )
#conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "sample", "1111")
sample_08 <- dbReadTable(conn, "sample_08")
dbDisconnect(conn)
options( java.parameters = "-Xmx8g" )
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "c:/work/lib/hive/lib/hive-jdbc-0.13.0.2.1.1.0-385.jar" )
#conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
sample_08 <- dbReadTable(conn, "sample_08")
dbDisconnect(conn)
sample_08
test<-data.frame((c("A","B","C")))
names(test)<-"test"
#R version 3.1.0 (2014-04-10) -- "Spring Dance" (64bit)
library(RJDBC)
library(DBI)
library(rJava)
.jinit()
for(l in list.files('c:/work/lib/hive/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
.jaddClassPath("C:/Work/lib/hive-service-0.11.0.jar")
.jclassPath()
options( java.parameters = "-Xmx8g" )
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "c:/work/lib/hive/lib/hive-jdbc-0.13.0.2.1.1.0-385.jar" )
conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
dbWriteTable(conn=conn, name="test3", value=test)
dbWriteTable(conn=conn, name="test3", value=test, append=F)
dbDisconnect(conn)
conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
dbWriteTable(conn=conn, "test3",test, row.names=F)
test<-data.frame((c("A","B","C")))
names(test)<-"test"
#R version 3.1.0 (2014-04-10) -- "Spring Dance" (64bit)
library(RJDBC)
library(DBI)
library(rJava)
.jinit()
for(l in list.files('c:/work/lib/hive/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
for(l in list.files('c:/work/lib/hadoop/lib/',pattern="jar$",full.names=T)){ .jaddClassPath(l)}
.jaddClassPath("C:/Work/lib/hive-service-0.11.0.jar")
.jclassPath()
options( java.parameters = "-Xmx8g" )
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "c:/work/lib/hive/lib/hive-jdbc-0.13.0.2.1.1.0-385.jar" )
#conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
conn <- dbConnect(drv, "jdbc:hive2://10.1.40.89:10000/default", "hue", "1111")
sample_08 <- dbReadTable(conn, "sample_08")
#dbWriteTable(conn=conn, name="test3", value=test, append=F)
dbWriteTable(conn=conn, "test4",test, row.names=F)
dbDisconnect(conn)
2**4
3**2
library(devtools)
devtools::install_github('christophergandrud/d3Network')
library(d3Network)
Source <- c("A", "A", "A", "A", "B", "B", "C", "C", "D")
Target <- c("B", "C", "D", "J", "E", "F", "G", "H", "I")
NetworkData <- data.frame(Source, Target)
d3SimpleNetwork(NetworkData, width = 400, height = 250,
textColour = "orange", linkColour = "red",
nodeColor = "orange", opacity = 0.9)
library(d3Network)
d3SimpleNetwork(NetworkData, width = 400, height = 250,
textColour = "orange", linkColour = "red",
nodeColor = "orange", opacity = 0.9)
d3SimpleNetwork(NetworkData, width = 400, height = 250)
d3SimpleNetwork(NetworkData, width = 400, height = 250)
install.packages("d3Network")
remove.packages("d3Network")
library(devtools)
library(d3Network)
install.packages("d3Network")
install.packages("d3Network")
update.packages()
update.packages()
library(d3Network)
install.packages("d3Network")
update.packages()
library(Shiny)
library(shiny)
shinyUI
shinyApp
shiny::
shiny::runGitHub("shiny-js-examples", "jcheng5", subdir="output")
runGitHub
runApp("output")
setwd("C:/Work/shiny2d3/shiny-js-examples-master")
library(shiny)
runApp("output")
runApp("output")
runApp("output")
runApp("output")
data.frame(
Sine = sin(1:100/10 + input$sinePhase * pi/180) * input$sineAmplitude,
Cosine = 0.5 * cos(1:100/10),
"Sine 2" = sin(1:100/10) * 0.25 + 0.5
)
data.frame(
Sine = sin(1:100/10 + 10 * pi/180) * pi,
Cosine = 0.5 * cos(1:100/10),
"Sine 2" = sin(1:100/10) * 0.25 + 0.5
)
x=1:50
data.frame(
x = x,
x_2=2*x
x_p2=x^2
)
x=1:50
data.frame(
x = x,
x_2=2*x,
x_p2=x^2
)
runApp("output")
renderLineChart
runApp("output")
runApp("output")
runApp("output")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("networ3d")
install.packages("networkD3")
library(networ3d)
library(networkD3)
library(networkD3)
# Create fake data
src <- c("A", "A", "A", "A",
"B", "B", "C", "C", "D")
target <- c("B", "C", "D", "J",
"E", "F", "G", "H", "I")
networkData <- data.frame(src, target)
# Plot
simpleNetwork(networkData)
hoch<-c("Ute","Ute","Ute","Ute")
unten<-c("Eugene","Frank","Maik","Alex")
networkData <- data.frame(hoch, unten)
hoch<-c("Ute","Ute","Ute","Ute")
unten<-c("Eugene","Frank","Maik","Alex")
networkData <- data.frame(hoch, unten)
simpleNetwork(networkData)
simpleNetwork(networkData, fontSize=14)
simpleNetwork(networkData, fontSize=20)
hoch<-c("Ute","Ute","Ute","Ute", "Markus")
unten<-c("Eugene","Frank","Maik","Alex", "Ute")
networkData <- data.frame(hoch, unten)
simpleNetwork(networkData, fontSize=20)
hoch<-c("Ute","Ute","Ute","Ute", "Markus", "Udo")
unten<-c("Eugene","Frank","Maik","Alex", "Ute", "Waldemar")
networkData <- data.frame(hoch, unten)
simpleNetwork(networkData, fontSize=20)
hoch<-c("Ute","Ute","Ute","Ute", "Markus","Markus", "Udo")
unten<-c("Eugene","Frank","Maik","Alex", "Ute", "Udo","Waldemar")
networkData <- data.frame(hoch, unten)
simpleNetwork(networkData, fontSize=20)
hoch<-c("Ute","Ute","Ute","Ute", "Markus","Markus", "Udo", "Udo", "Udo")
unten<-c("Eugene","Frank","Maik","Alex", "Ute", "Udo","Waldemar", "Dirk", "Valerij")
networkData <- data.frame(hoch, unten)
simpleNetwork(networkData, fontSize=20)
hoch<-c("Ute","Ute","Ute","Ute", "Markus","Markus", "Udo", "Udo", "Udo", "Thomas", "Markus")
unten<-c("Eugene","Frank","Maik","Alex", "Ute", "Udo","Waldemar", "Dirk", "Valerij", "Markus", "Thomas")
networkData <- data.frame(hoch, unten)
simpleNetwork(networkData, fontSize=20)
abt1<-c("Eugene","Frank","Maik","Alex")
abt2<-c("Udo","Waldemar", "Dirk", "Valerij")
vor1<-rep("Ute", length(abt1))
vor2<-rep("Udo", length(abt2))
abt1<-c("Eugene","Frank","Maik","Alex")
abt2<-c("Udo","Waldemar", "Dirk", "Valerij")
vor1<-rep("Ute", length(abt1))
vor2<-rep("Udo", length(abt2))
vor<-c(vor1, vor2)
abt<-c(abt1, abt2)
networkData <- data.frame(hoch, unten)
simpleNetwork(networkData, fontSize=20)
networkData <- data.frame(vor, abt)
simpleNetwork(networkData, fontSize=20)
vor<-c(vor1, vor2, chefs, rev(chefs))
abt<-c(abt1, abt2, rev(chefs), chefs
)
vor<-c(vor1, vor2, chefs, rev(chefs))
abt<-c(abt1, abt2, rev(chefs), chefs)
chefs<-c("Markus", "Thomas")
vor<-c(vor1, vor2, chefs, rev(chefs))
abt<-c(abt1, abt2, rev(chefs), chefs)
networkData <- data.frame(vor, abt)
simpleNetwork(networkData, fontSize=20)
vor<-c(vor1, vor2, chefs, rev(chefs), chefs[1], chefs[2], chefs[1],chefs[2])
abt<-c(abt1, abt2, rev(chefs), chefs, "Udo", "Udo", "Ute", "Ute")
networkData <- data.frame(vor, abt)
simpleNetwork(networkData, fontSize=20)
gewd()
getwd()
setwd("C:/Users/e.harschack/Documents/ITzza2/net")
library(magrittr)
simpleNetwork(networkData) %>%
saveNetwork(file = 'Net1.html')
library(pandoc)
install.packages("pandoc")
?heatmap
require(graphics); require(grDevices)
x  <- as.matrix(mtcars)
rc <- rainbow(nrow(x), start = 0, end = .3)
cc <- rainbow(ncol(x), start = 0, end = .3)
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
utils::str(hv) # the two re-ordering index vectors
## no column dendrogram (nor reordering) at all:
heatmap(x, Colv = NA, col = cm.colors(256), scale = "column",
RowSideColors = rc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
heatmap(x, Rowv = NA, Colv = NA, scale = "column",
main = "heatmap(*, NA, NA) ~= image(t(x))")
library(d3heatmap)
install.packages("d3heatmap")
library(d3heatmap)
url <- "http://datasets.flowingdata.com/ppg2008.csv"
nba_players <- read.csv(url, row.names = 1)
d3heatmap(nba_players, scale = "column")
library(magrittr)
nba_players
data(mtcars)
d3heatmap(mtcars, scale = "column")
d3heatmap(mtcars, scale = "column", col=rainbow(100))
simpleNetwork(networkData) %>%
saveNetwork(file = 'Net1.html')
